type: custom:vertical-stack-in-card
card_mod:
  style: |
    ha-card { /* MAIN */
      padding: 5px !important;
      background: linear-gradient(to bottom,rgba(var(--rgb-surface0),0.8) 0%,rgba(var(--rgb-surface0),0.5) 50%,rgba(var(--rgb-surface0),0.8) 100% );
      border-radius: 5px !important;
    /* GLOBAL STYLES */
      text-transform: lowercase;
      font-variant: small-caps;
      font-family: 'Montserrat';
      --border: 1px solid var(--disabled-color);
      animation: show 1s ease-in; }
      @keyframes show {
        0% { opacity: 0; }
        100% { opacity: 1; }
      }
cards:
  - type: custom:stack-in-card
    mode: horizontal
    keep:
      background: true
    card_mod:
      style: |
        /* FIRST ROW */ ha-card {
          border-radius: 5px 5px 0px 0px; }
    cards:
      - variables:
          LAYOUT_POSITION: 1.1
          name: living
          entity: light.living
          icon: phu:rooms-living
          motion: binary_sensor.living_motion_occupancy
          door: binary_sensor.living_door_contact
          light_count: sensor.lights_on_living
          temp: sensor.tmp_living
          nav_path: living
          custom1_visible: visible
          custom1_entity: binary_sensor.adams_iphone_focus
          custom1_icon_on: mdi:television-play
          custom1_icon_off: mdi:television
          custom2_visible: visible
          custom2_entity: binary_sensor.adams_iphone_focus
          custom2_icon_on: mdi:audio-input-rca
          custom2_icon_off: mdi:audio-input-rca
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1.2;
                {% else %}
                  scale: 1;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              border-right: var(--border) !important; margin: 0 !important;
              animation: show 1s linear infinite !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;}
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s;}
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: '[[[ return variables.entity ]]]'
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
      - variables:
          LAYOUT_POSITION: 1.2
          name: kitchen
          temp: sensor.tmp_kitchen
          entity: light.kitchen
          icon: mdi:silverware-variant
          motion: binary_sensor.kitchen_motion_occupancy
          door: binary_sensor.kitchen_ext_door
          light_count: sensor.lights_on_kitchen
          nav_path: kitchen
          custom1_visible: visible
          custom1_entity: media_player.kitchen_display
          custom1_icon_on: mdi:television-play
          custom1_icon_off: mdi:television
          custom2_visible: visible
          custom2_entity: media_player.kitchen
          custom2_icon_on: mdi:speaker-play
          custom2_icon_off: mdi:speaker-stop
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1.2;
                {% else %}
                  scale: 1;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              border-right: var(--border) !important; margin: 0 !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;}
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s;}
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: '[[[ return variables.entity ]]]'
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
      - variables:
          LAYOUT_POSITION: 1.3
          temp: sensor.tmp_study
          name: study
          entity: light.study
          icon: phu:desk-lamp
          motion: binary_sensor.study_motion_occupancy
          door: binary_sensor.study_door_contact
          light_count: sensor.lights_on_study
          nav_path: study
          custom1_visible: visible
          custom1_entity: binary_sensor.adams_iphone_focus
          custom1_icon_on: mdi:desktop-tower-monitor
          custom1_icon_off: mdi:desktop-tower-monitor
          custom2_visible: hidden
          custom2_entity: binary_sensor.adams_iphone_focus
          custom2_icon_on: mdi:desktop-tower-monitor
          custom2_icon_off: mdi:audio-input-rca
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1.2;
                {% else %}
                  scale: 1;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              border-right: var(--border) !important; margin: 0 !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;}
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s;}
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: '[[[ return variables.entity ]]]'
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
      - variables:
          LAYOUT_POSITION: 1.4
          temp: sensor.tmp_hallway
          name: hallway
          entity: light.hall_landing
          icon: phu:rooms-hallway
          motion: binary_sensor.hall_landing_motion_group
          door: binary_sensor.front_door_sensor_contact
          light_count: sensor.lights_group_hall_landing
          nav_path: hall
          custom1_visible: hidden
          custom1_entity: binary_sensor.adams_iphone_focus
          custom1_icon_on: mdi:television-play
          custom1_icon_off: mdi:television
          custom2_visible: hidden
          custom2_entity: binary_sensor.adams_iphone_focus
          custom2_icon_on: mdi:audio-input-rca
          custom2_icon_off: mdi:audio-input-rca
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1;
                {% else %}
                  scale: 0.8;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              margin: 0 !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;}
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s;}
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: '[[[ return variables.entity ]]]'
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
  - type: custom:stack-in-card
    mode: horizontal
    keep:
      background: true
    card_mod:
      style: |
        /* SECOND ROW */ ha-card {
          border-radius: 0px;
          margin-top: 0px !important;
          margin-bottom: 0px !important;
          border-top: var(--border) !important;
          border-bottom: var(--border) !important; }
    cards:
      - variables:
          LAYOUT_POSITION: 2.1
          temp: sensor.tmp_bedroom
          name: bedroom
          entity: light.bedroom_en_suite
          icon: phu:rooms-bedroom
          motion: binary_sensor.bed_motion
          door: sensor.placeholder
          light_count: sensor.lights_on_bedroom
          nav_path: bedroom
          custom1_visible: visible
          custom1_entity: media_player.tv_bedroom
          custom1_icon_on: mdi:television-play
          custom1_icon_off: mdi:television
          custom2_visible: visible
          custom2_entity: media_player.bedroom
          custom2_icon_on: mdi:speaker-play
          custom2_icon_off: mdi:speaker-off
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1.2;
                {% else %}
                  scale: 1;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              border-right: var(--border) !important; margin: 0 !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;
              }
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s; }
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: '[[[ return variables.entity ]]]'
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
      - variables:
          LAYOUT_POSITION: 2.2
          temp: sensor.tmp_dressing
          name: dressing
          entity: light.dressing_room
          icon: mdi:hanger
          motion: binary_sensor.dressing_motion_occupancy
          door: binary_sensor.dressing_door_contact
          light_count: sensor.lights_on_dressing
          nav_path: dressing
          custom1_visible: hidden
          custom1_entity: binary_sensor.adams_iphone_focus
          custom1_icon_on: mdi:television-play
          custom1_icon_off: mdi:television
          custom2_visible: visible
          custom2_entity: media_player.dressing_room
          custom2_icon_on: mdi:speaker-play
          custom2_icon_off: mdi:speaker-stop
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1.2;
                {% else %}
                  scale: 1;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              border-right: var(--border) !important; margin: 0 !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;}
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s;}
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: '[[[ return variables.entity ]]]'
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
      - variables:
          LAYOUT_POSITION: 2.3
          temp: sensor.tmp_guest
          name: guest
          entity: light.alt_guest
          icon: phu:rooms-guest-room
          motion: sensor.placeholder
          door: binary_sensor.spare_room_door_contact
          light_count: sensor.lights_on_guest
          nav_path: guest
          custom1_visible: hidden
          custom1_entity: binary_sensor.adams_iphone_focus
          custom1_icon_on: mdi:television-play
          custom1_icon_off: mdi:television
          custom2_visible: hidden
          custom2_entity: binary_sensor.adams_iphone_focus
          custom2_icon_on: mdi:audio-input-rca
          custom2_icon_off: mdi:audio-input-rca
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1.2;
                {% else %}
                  scale: 1;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              border-right: var(--border) !important; margin: 0 !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;}
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s;}
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: '[[[ return variables.entity ]]]'
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
      - variables:
          LAYOUT_POSITION: 2.4
          temp: sensor.tmp_cats
          name: cats
          entity: light.cat_light
          icon: mdi:cat
          motion: sensor.placeholder
          door: sensor.placeholder
          light_count: sensor.lights_on_all
          nav_path: cats
          custom1_visible: visible
          custom1_entity: binary_sensor.food_level
          custom1_icon_on: mdi:cup-outline
          custom1_icon_off: mdi:cup
          custom2_visible: visible
          custom2_entity: binary_sensor.cat_litter_state
          custom2_icon_on: mdi:emoticon-poop
          custom2_icon_off: mdi:emoticon-poop-outline
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1.2;
                {% else %}
                  scale: 1;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              margin: 0 !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;}
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s;}
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: '[[[ return variables.entity ]]]'
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
  - type: custom:stack-in-card
    mode: horizontal
    keep:
      background: true
    card_mod:
      style: |
        /* THIRD ROW */ ha-card {
          border-radius: 0px 0px 5px 5px; }
    cards:
      - variables:
          LAYOUT_POSITION: 3.1
          temp: sensor.tmp_garage
          name: garage
          entity: light.garage
          icon: mdi:garage-variant
          motion: binary_sensor.garage_motion_occupancy
          door: binary_sensor.garage_door_main_contact
          light_count: sensor.lights_on_garage
          nav_path: garage
          custom1_visible: visible
          custom1_entity: media_player.garage_speaker
          custom1_icon_on: phu:chromecast
          custom1_icon_off: phu:chromecast
          custom2_visible: visible
          custom2_entity: binary_sensor.garage_door_main_contact
          custom2_icon_on: mdi:garage-open-variant
          custom2_icon_off: mdi:garage-variant
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1.2;
                {% else %}
                  scale: 1;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              border-right: var(--border) !important; margin: 0 !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;}
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s;}
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: |
          [[[ 
            const state = states[variables.entity].state;
            const ent = state == 'unavailable' ? 'input_boolean.i_do_nothing' : [variables.entity] 
            return ent
          ]]]
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
      - variables:
          LAYOUT_POSITION: 3.2
          temp: sensor.tmp_outside
          name: outside
          entity: light.outside_group
          icon: phu:rooms-outdoor
          motion: binary_sensor.outdoor_sensor_motion
          door: binary_sensor.front_door_sensor_contact
          light_count: sensor.lights_group_outside
          nav_path: outside
          custom1_visible: visible
          custom1_entity: binary_sensor.ice_ice_baby
          custom1_icon_on: mdi:snowflake
          custom1_icon_off: mdi:circle-outline
          custom2_visible: visible
          custom2_entity: weather.forecast_home
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1.2;
                {% else %}
                  scale: 1;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              border-right: var(--border) !important; margin: 0 !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;}
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s;}
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: '[[[ return variables.entity ]]]'
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
      - variables:
          LAYOUT_POSITION: 3.3
          temp: sensor.tmp_work
          name: work
          entity: light.work
          icon: mdi:paw
          motion: sensor.placeholder
          door: sensor.placeholder
          light_count: sensor.lights_group_work
          nav_path: work
          custom1_visible: hidden
          custom1_entity: binary_sensor.adams_iphone_focus
          custom1_icon_on: mdi:television-play
          custom1_icon_off: mdi:television
          custom2_visible: hidden
          custom2_entity: binary_sensor.adams_iphone_focus
          custom2_icon_on: mdi:audio-input-rca
          custom2_icon_off: mdi:audio-input-rca
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1.2;
                {% else %}
                  scale: 1;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              border-right: var(--border) !important; margin: 0 !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;}
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s;}
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: '[[[ return variables.entity ]]]'
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
      - variables:
          LAYOUT_POSITION: 3.4
          name: parents
          temp: sensor.tmp_parents
          entity: light.parents_light
          icon: mdi:home-plus-outline
          motion: sensor.placeholder
          door: sensor.placeholder
          light_count: sensor.lights_group_parents
          nav_path: parents
          custom1_visible: hidden
          custom1_entity: binary_sensor.adams_iphone_focus
          custom1_icon_on: mdi:television-play
          custom1_icon_off: mdi:television
          custom2_visible: hidden
          custom2_entity: binary_sensor.adams_iphone_focus
          custom2_icon_on: mdi:audio-input-rca
          custom2_icon_off: mdi:audio-input-rca
        type: custom:button-card
        tap_action:
          action: navigate
          navigation_path: '[[[ return variables.nav_path ]]]'
        double_tap_action:
          action: toggle
        hold_action:
          action: toggle
        aspect_ratio: 1/1
        card_mod:
          style: >
            #name {
              letter-spacing: 0.1em; position: absolute; top: 62%; left: 50%; transform: translate(-50%, -50%);
                {% if is_state(config.entity,'on') %}
                  font-size: 1em; font-weight: 600;
                {% else %}
                  font-size: 0.9em; font-weight: 500;
                {% endif %}
              transition: 0.2s;
            } #icon {
              opacity: 1; width: 100%; height: 45%; position: absolute; bottom: 20%; padding: 0px;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44)); color: var(--orange-color) !important; scale: 1.2;
                {% else %}
                  scale: 1;
                {% endif %}
              transition: all 0.2s, opacity 3s;
            }

            #img-cell { /* NOTE - may need to add background: none */
              height: 100%; margin: 0px; padding: 0px;
            }

            #temp {
              opacity: 0; width: 100%; scale: 0; font-size: 1.6em; position: absolute; top: 25%; transform: translateY(-25%); text-shadow: 2px 2px 1px rgb(0,0,0,0.15); padding: 0px; white-space: nowrap !important;
                {% if is_state(config.entity,'on') %}
                  filter: drop-shadow(0px 0px 10px rgba(var(--rgb-yellow),0.44));
                {% else %}{% endif %}
              transition: all 1s;
            }

            #notification { opacity: 0.5;
              visibility: {{ 'visible' if is_state(config.entity,'on') else 'hidden' }};
              position: absolute; right: 6%; top: 4%; text-align: right; font-size: 0.7em; font-weight: 300; line-height: 100%; filter: drop-shadow(2px 2px 2px rgb(0,0,0,0.5));
            }

            ha-card {
              padding: 0px !important; border-radius: 0px !important; margin: 0px !important;
              border_width: 0px 1px 0px 0px !important;
              margin: 0 !important;
              background: {{ 'radial-gradient(circle at 100% -150%,rgba(var(--rgb-yellow), 0.3),var(--card-background-color));' if is_state(config.entity,'on') }};
            }

            ha-card:hover {
              #name { font-weight: 600; transition: all 0.7s;}
              #icon { opacity: 0; filter: blur(5px) drop-shadow(0px 0px 0px rgb(0,0,0,0)); scale: 5; transition: all 2s, opacity 0.4s, scale 1s;}
              #temp { {{'color: orange;' if is_state(config.entity,'on') }} opacity: 1; scale: 1; transition: scale 0.5s, opacity 1s;}
            }

            ha-card:active { transform: translateY(1.5px) scale(0.975);
            transition: 0s; box-shadow: 0 0.5px 2px 0 rgba(0, 0, 0, 0.16);}

            #custom1 { left:  10%; }

            #custom2 { left:  33%; }

            #custom3 { right: 33%; }

            #custom4 { right: 10%; }

            #custom1, #custom2, #custom3, #custom4 { position: absolute; width:
            15%; padding: 0px; margin: 0px; bottom: 7%; scale: 1;} 
        entity: '[[[ return variables.entity ]]]'
        name: '[[[ return variables.name ]]]'
        icon: '[[[ return variables.icon ]]]'
        triggers_update:
          - '[[[ return variables.door ]]]'
          - '[[[ return variables.temp ]]]'
          - '[[[ return variables.motion ]]]'
          - '[[[ return variables.light_count ]]]'
          - '[[[ return variables.custom1_entity ]]]'
          - '[[[ return variables.custom2_entity ]]]'
        custom_fields:
          custom1: |
            [[[ 
              const state = states[variables.custom1_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom1_icon_on : variables.custom1_icon_off;
              const visibility = [variables.custom1_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom2: |
            [[[ 
              const state = states[variables.custom2_entity].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? variables.custom2_icon_on : variables.custom2_icon_off;
              const visibility = [variables.custom2_visible];
              return `<ha-icon icon="${icon}" style="color: ${color}; visibility: ${visibility}"></ha-icon>`
            ]]]
          custom3: |
            [[[ 
              const state = states[variables.door].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state == 'on' ? 'mdi:door-open' : 'mdi:door-closed';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          custom4: |
            [[[ 
              const state = states[variables.motion].state;
              const color = state == 'on' ? 'var(--amber-color)' : 'var(--disabled-color)'
              const icon = state === 'on' ? 'mdi:motion-sensor' : 'mdi:motion-sensor';
              return `<ha-icon icon="${icon}" style="color: ${color};"></ha-icon>`
            ]]]
          temp: |
            [[[
              const state = parseFloat(states[variables.temp].state).toFixed(0);
              return `<span style="font-weight: 800;">${state}</span><span style="font-weight: 500; font-size: 0.6em; margin-right: -15%; margin-left: 5px; opacity: 0.8;">Â°c</span>`;
            ]]]
          notification: |
            [[[ 
              const state = states[variables.light_count].state;
              const display = state == '0' ? 'none' : 'block';
              return `<span style="transition: all 0.5s; display: ${display};">${state}</span>`;
            ]]]
